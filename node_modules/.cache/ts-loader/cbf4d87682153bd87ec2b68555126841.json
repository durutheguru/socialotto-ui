{"remainingRequest":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js!/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js??ref--13-2!/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts","dependencies":[{"path":"/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts","mtime":1590615951907},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9kZHVydS9WU0NvZGUvT21hcnplVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9kZHVydS9WU0NvZGUvT21hcnplVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvZGR1cnUvVlNDb2RlL09tYXJ6ZVVJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBNb2NrQWRhcHRlciBmcm9tICdheGlvcy1tb2NrLWFkYXB0ZXInOwppbXBvcnQgTG9nIGZyb20gJ0AvY29tcG9uZW50cy91dGlsL0xvZyc7Cgp2YXIgSW50ZXJjZXB0b3JSZWdpc3RyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSW50ZXJjZXB0b3JSZWdpc3RyeSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcmNlcHRvclJlZ2lzdHJ5KTsKICB9CgogIF9jcmVhdGVDbGFzcyhJbnRlcmNlcHRvclJlZ2lzdHJ5LCBudWxsLCBbewogICAga2V5OiAicmVnaXN0ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKGludGVyY2VwdG9yKSB7CiAgICAgIHZhciBpbnRlcmNlcHRvcnNFbmFibGVkID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9FTkFCTEVfSU5URVJDRVBUT1JTID09PSAndHJ1ZSc7CgogICAgICBpZiAoIWludGVyY2VwdG9yc0VuYWJsZWQpIHsKICAgICAgICBMb2cuaW5mbygnSW50ZXJjZXB0b3JzIGRpc2FibGVkLiBJZ25vcmluZyBJbnRlcmNlcHRvciByZWdpc3RyYXRpb24uJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoaW50ZXJjZXB0b3IuaW50ZXJjZXB0Q29uZmlncyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBjb25maWcgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgICBzd2l0Y2ggKGNvbmZpZy5tZXRob2QpIHsKICAgICAgICAgICAgY2FzZSAnR0VUJzoKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMb2cuaW5mbygnUmVnaXN0ZXJpbmcgR0VUIGhhbmRsZXIgZm9yICcgKyBJbnRlcmNlcHRvclJlZ2lzdHJ5LkJBU0VfVVJMICsgY29uZmlnLnVybCk7CiAgICAgICAgICAgICAgICBJbnRlcmNlcHRvclJlZ2lzdHJ5Lm1vY2sub25HZXQoSW50ZXJjZXB0b3JSZWdpc3RyeS5CQVNFX1VSTCArIGNvbmZpZy51cmwpLnJlcGx5KGNvbmZpZy5yZXNwb25zZS5zdGF0dXMsIGNvbmZpZy5yZXNwb25zZS5ib2R5LCBjb25maWcucmVzcG9uc2UuaGVhZGVycyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlICdQT1NUJzoKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMb2cuaW5mbygnUmVnaXN0ZXJpbmcgUE9TVCBoYW5kbGVyIGZvciAnICsgSW50ZXJjZXB0b3JSZWdpc3RyeS5CQVNFX1VSTCArIGNvbmZpZy51cmwpOwogICAgICAgICAgICAgICAgSW50ZXJjZXB0b3JSZWdpc3RyeS5tb2NrLm9uUG9zdChJbnRlcmNlcHRvclJlZ2lzdHJ5LkJBU0VfVVJMICsgY29uZmlnLnVybCkucmVwbHkoY29uZmlnLnJlc3BvbnNlLnN0YXR1cywgY29uZmlnLnJlc3BvbnNlLmJvZHksIGNvbmZpZy5yZXNwb25zZS5oZWFkZXJzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5pbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvcik7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSW50ZXJjZXB0b3JSZWdpc3RyeTsKfSgpOwoKZXhwb3J0IHsgSW50ZXJjZXB0b3JSZWdpc3RyeSBhcyBkZWZhdWx0IH07CkludGVyY2VwdG9yUmVnaXN0cnkuaW50ZXJjZXB0b3JzID0gW107CkludGVyY2VwdG9yUmVnaXN0cnkuQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0JBU0VfVVJMOwpJbnRlcmNlcHRvclJlZ2lzdHJ5Lm1vY2sgPSBuZXcgTW9ja0FkYXB0ZXIoYXhpb3MsIHsKICBvbk5vTWF0Y2g6ICdwYXNzdGhyb3VnaCcKfSk7"},{"version":3,"sources":["/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts"],"names":[],"mappings":";;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,MAAwB,oBAAxB;AAEA,OAAO,GAAP,MAAgB,uBAAhB;;IAIqB,mB;;;;;;;6BASM,W,EAAyB;AAC5C,UAAM,mBAAmB,GAAI,OAAO,CAAC,GAAR,CAAY,2BAAZ,KAA4C,MAAzE;;AAEA,UAAI,CAAC,mBAAL,EAA0B;AACtB,QAAA,GAAG,CAAC,IAAJ,CAAS,2DAAT;AACA;AACH;;AAN2C,iDAQvB,WAAW,CAAC,gBARW;AAAA;;AAAA;AAQ5C,4DAAmD;AAAA,cAAxC,MAAwC;;AAC/C,kBAAQ,MAAM,CAAC,MAAf;AACI,iBAAK,KAAL;AAAY;AACR,gBAAA,GAAG,CAAC,IAAJ,CAAS,iCAAiC,mBAAmB,CAAC,QAArD,GAAgE,MAAM,CAAC,GAAhF;AACA,gBAAA,mBAAmB,CAAC,IAApB,CACK,KADL,CACW,mBAAmB,CAAC,QAApB,GAA+B,MAAM,CAAC,GADjD,EAEK,KAFL,CAGQ,MAAM,CAAC,QAAP,CAAgB,MAHxB,EAIQ,MAAM,CAAC,QAAP,CAAgB,IAJxB,EAKQ,MAAM,CAAC,QAAP,CAAgB,OALxB;AAOA;AACH;;AAED,iBAAK,MAAL;AAAa;AACT,gBAAA,GAAG,CAAC,IAAJ,CAAS,kCAAkC,mBAAmB,CAAC,QAAtD,GAAiE,MAAM,CAAC,GAAjF;AACA,gBAAA,mBAAmB,CAAC,IAApB,CACK,MADL,CACY,mBAAmB,CAAC,QAApB,GAA+B,MAAM,CAAC,GADlD,EAEK,KAFL,CAGQ,MAAM,CAAC,QAAP,CAAgB,MAHxB,EAIQ,MAAM,CAAC,QAAP,CAAgB,IAJxB,EAKQ,MAAM,CAAC,QAAP,CAAgB,OALxB;AAOA;AACH;AAvBL;AAyBH;AAlC2C;AAAA;AAAA;AAAA;AAAA;;AAoC5C,WAAK,YAAL,CAAkB,IAAlB,CAAuB,WAAvB;AACH;;;;;;SA9CgB,mB;AAEH,mBAAA,CAAA,YAAA,GAA+B,EAA/B;AAEA,mBAAA,CAAA,QAAA,GAAmB,OAAO,CAAC,GAAR,CAAY,gBAA/B;AAEC,mBAAA,CAAA,IAAA,GAAoB,IAAI,WAAJ,CAAgB,KAAhB,EAAuB;AAAE,EAAA,SAAS,EAAE;AAAb,CAAvB,CAApB","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport Log from '@/components/util/Log';\nimport IInterceptor from './IInterceptor';\n\n\nexport default class InterceptorRegistry {\n\n    public static interceptors: IInterceptor[] = [];\n\n    public static BASE_URL: string = process.env.VUE_APP_BASE_URL;\n\n    private static mock: MockAdapter = new MockAdapter(axios, { onNoMatch: 'passthrough' });\n\n\n    public static register(interceptor: IInterceptor) {\n        const interceptorsEnabled = (process.env.VUE_APP_ENABLE_INTERCEPTORS === 'true');\n\n        if (!interceptorsEnabled) {\n            Log.info('Interceptors disabled. Ignoring Interceptor registration.');\n            return;\n        }\n        \n        for (const config of interceptor.interceptConfigs) {\n            switch (config.method) {\n                case 'GET': {\n                    Log.info('Registering GET handler for ' + InterceptorRegistry.BASE_URL + config.url);\n                    InterceptorRegistry.mock\n                        .onGet(InterceptorRegistry.BASE_URL + config.url)\n                        .reply(\n                            config.response.status, \n                            config.response.body,\n                            config.response.headers\n                        );\n                    break;\n                }\n\n                case 'POST': {\n                    Log.info('Registering POST handler for ' + InterceptorRegistry.BASE_URL + config.url);\n                    InterceptorRegistry.mock\n                        .onPost(InterceptorRegistry.BASE_URL + config.url)\n                        .reply(\n                            config.response.status, \n                            config.response.body,\n                            config.response.headers\n                        );\n                    break;\n                }\n            }\n        }\n\n        this.interceptors.push(interceptor);\n    }\n\n\n}\n\n"],"sourceRoot":""}]}