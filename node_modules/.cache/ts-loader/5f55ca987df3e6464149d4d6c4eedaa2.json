{"remainingRequest":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js!/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js??ref--13-2!/Users/dduru/VSCode/OmarzeUI/src/components/auth/UserAuthContext.ts","dependencies":[{"path":"/Users/dduru/VSCode/OmarzeUI/src/components/auth/UserAuthContext.ts","mtime":1585528202954},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1YiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9kZHVydS9WU0NvZGUvT21hcnplVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvZGR1cnUvVlNDb2RlL09tYXJ6ZVVJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCB7IExvZywgQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbCc7CmltcG9ydCBkZXNjcmlwdG9ycyBmcm9tICdAL2NvbXBvbmVudHMvYXV0aC9kZXNjcmlwdG9ycyc7Cgp2YXIgVXNlckF1dGhDb250ZXh0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gVXNlckF1dGhDb250ZXh0KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXJBdXRoQ29udGV4dCk7CgogICAgdGhpcy51c2VybmFtZSA9ICcnOwogICAgdGhpcy5hdXRob3JpemF0aW9ucyA9IFtdOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFVzZXJBdXRoQ29udGV4dCwgW3sKICAgIGtleTogImluaXRpYWxpemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUodG9rZW4pIHsKICAgICAgdmFyIHRva2VuTWF0Y2ggPSB0b2tlbi5tYXRjaChDb25zdGFudHMucmVnZXhwcy5BVVRIX1RPS0VOKTsKCiAgICAgIGlmICh0b2tlbk1hdGNoID09PSBudWxsKSB7CiAgICAgICAgTG9nLmVycm9yKCdVbmFibGUgdG8gRXh0cmFjdCBUb2tlbiBQYXlsb2FkJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnByb2Nlc3NUb2tlblBheWxvYWQodG9rZW5NYXRjaFsxXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaG9tZVVybCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaG9tZVVybCgpIHsKICAgICAgdmFyIGF1dGhDb250ZXh0ID0gdGhpcy5hdXRoQ29udGV4dCgpOwoKICAgICAgaWYgKGF1dGhDb250ZXh0ID09PSBudWxsKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICByZXR1cm4gYXV0aENvbnRleHQuaG9tZVVybDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhdXRoQ29udGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aENvbnRleHQoKSB7CiAgICAgIHZhciBjb250ZXh0RGVzY3JpcHRvciA9IG51bGw7CiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZGVzY3JpcHRvcnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7CiAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIGlmICh0aGlzLmhhc0F1dGhvcml6YXRpb24oZGVzY3JpcHRvci5uYW1lKSkgewogICAgICAgICAgICBjb250ZXh0RGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHsKICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gY29udGV4dERlc2NyaXB0b3I7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFzQXV0aG9yaXphdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzQXV0aG9yaXphdGlvbihhdXRob3JpemF0aW9uKSB7CiAgICAgIHJldHVybiB0aGlzLmF1dGhvcml6YXRpb25zLmxlbmd0aCA+IDAgJiYgdGhpcy5hdXRob3JpemF0aW9ucy5pbmRleE9mKGF1dGhvcml6YXRpb24pID4gLTE7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvY2Vzc1Rva2VuUGF5bG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1Rva2VuUGF5bG9hZChwYXlsb2FkKSB7CiAgICAgIHBheWxvYWQgPSBhdG9iKHBheWxvYWQpOwogICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocGF5bG9hZCk7CiAgICAgIHRoaXMudXNlcm5hbWUgPSBkYXRhLnN1YjsKICAgICAgdGhpcy5hdXRob3JpemF0aW9ucyA9IGRhdGEuYXV0aG9yaXphdGlvbnM7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJnZXRJbnN0YW5jZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7CiAgICAgIGlmIChVc2VyQXV0aENvbnRleHQuaW5zdGFuY2UgPT09IG51bGwpIHsKICAgICAgICBMb2cuaW5mbygnQ3JlYXRpbmcgTmV3IFVzZXJBdXRoQ29udGV4dCBpbnN0YW5jZScpOwogICAgICAgIFVzZXJBdXRoQ29udGV4dC5pbnN0YW5jZSA9IG5ldyBVc2VyQXV0aENvbnRleHQoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFVzZXJBdXRoQ29udGV4dC5pbnN0YW5jZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICBkZWxldGUgVXNlckF1dGhDb250ZXh0Lmluc3RhbmNlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFVzZXJBdXRoQ29udGV4dDsKfSgpOwoKZXhwb3J0IHsgVXNlckF1dGhDb250ZXh0IGFzIGRlZmF1bHQgfTsKVXNlckF1dGhDb250ZXh0Lmluc3RhbmNlID0gbnVsbDs="},{"version":3,"sources":["/Users/dduru/VSCode/OmarzeUI/src/components/auth/UserAuthContext.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,SAAS,GAAT,EAAc,SAAd,QAA+B,SAA/B;AAGA,OAAO,WAAP,MAAwB,+BAAxB;;IAGqB,e;;;AAArB,6BAAA;AAAA;;AAoBY,SAAA,QAAA,GAAmB,EAAnB;AAGA,SAAA,cAAA,GAA2B,EAA3B;AAkDX;;;;+BA/CqB,K,EAAa;AAC3B,UAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,OAAV,CAAkB,UAA9B,CAAnB;;AACA,UAAI,UAAU,KAAK,IAAnB,EAAyB;AACrB,QAAA,GAAG,CAAC,KAAJ,CAAU,iCAAV;AACA;AACH;;AAED,WAAK,mBAAL,CAAyB,UAAU,CAAC,CAAD,CAAnC;AACH;;;8BAGa;AACV,UAAM,WAAW,GAAG,KAAK,WAAL,EAApB;;AACA,UAAI,WAAW,KAAK,IAApB,EAA0B;AACtB,eAAO,EAAP;AACH;;AAED,aAAO,WAAW,CAAC,OAAnB;AACH;;;kCAGiB;AACd,UAAI,iBAAiB,GAAiC,IAAtD;AADc;AAAA;AAAA;;AAAA;AAGd,6BAAyB,WAAzB,8HAAsC;AAAA,cAA3B,UAA2B;;AAClC,cAAI,KAAK,gBAAL,CAAsB,UAAU,CAAC,IAAjC,CAAJ,EAA4C;AACxC,YAAA,iBAAiB,GAAG,UAApB;AACH;AACJ;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASd,aAAO,iBAAP;AACH;;;qCAGuB,a,EAAqB;AACzC,aAAQ,KAAK,cAAL,CAAoB,MAApB,GAA6B,CAA9B,IAAqC,KAAK,cAAL,CAAoB,OAApB,CAA4B,aAA5B,IAA6C,CAAC,CAA1F;AACH;;;wCAG2B,O,EAAe;AACvC,MAAA,OAAO,GAAG,IAAI,CAAC,OAAD,CAAd;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,OAAX,CAAb;AAEA,WAAK,QAAL,GAAgB,IAAI,CAAC,GAArB;AACA,WAAK,cAAL,GAAsB,IAAI,CAAC,cAA3B;AACH;;;kCAlEwB;AACrB,UAAI,eAAe,CAAC,QAAhB,KAA6B,IAAjC,EAAuC;AACnC,QAAA,GAAG,CAAC,IAAJ,CAAS,uCAAT;AACA,QAAA,eAAe,CAAC,QAAhB,GAA2B,IAAI,eAAJ,EAA3B;AACH;;AAED,aAAO,eAAe,CAAC,QAAvB;AACH;;;8BAGoB;AACjB,aAAO,eAAe,CAAC,QAAvB;AACH;;;;;;SAjBgB,e;AAEH,eAAA,CAAA,QAAA,GAAmC,IAAnC","sourcesContent":["import { Log, Constants } from '../util';\nimport authDescriptors from '@/components/auth/descriptors';\nimport AuthContextDescriptor from './descriptors/AuthContextDescriptor';\nimport descriptors from '@/components/auth/descriptors';\n\n\nexport default class UserAuthContext {\n\n    public static instance: UserAuthContext | null = null;\n\n\n    public static getInstance(): UserAuthContext {\n        if (UserAuthContext.instance === null) {\n            Log.info('Creating New UserAuthContext instance');\n            UserAuthContext.instance = new UserAuthContext();\n        }\n\n        return UserAuthContext.instance;\n    }\n\n\n    public static destroy() {\n        delete UserAuthContext.instance;\n    }\n\n\n    private username: string = '';\n\n\n    private authorizations: string[] = [];\n\n\n    public initialize(token: string) {\n        const tokenMatch = token.match(Constants.regexps.AUTH_TOKEN);\n        if (tokenMatch === null) {\n            Log.error('Unable to Extract Token Payload');\n            return;\n        }\n\n        this.processTokenPayload(tokenMatch[1]);\n    }\n\n\n    public homeUrl(): string {\n        const authContext = this.authContext();\n        if (authContext === null) {\n            return '';\n        }\n\n        return authContext.homeUrl;\n    }\n\n\n    public authContext(): AuthContextDescriptor | null {\n        let contextDescriptor: AuthContextDescriptor | null = null;\n\n        for (const descriptor of descriptors) {\n            if (this.hasAuthorization(descriptor.name)) {\n                contextDescriptor = descriptor;\n            }\n        }\n\n        return contextDescriptor;\n    }\n\n\n    public hasAuthorization(authorization: string): boolean {\n        return (this.authorizations.length > 0) && (this.authorizations.indexOf(authorization) > -1);\n    }\n\n\n    private processTokenPayload(payload: string) {\n        payload = atob(payload);\n        const data = JSON.parse(payload);\n\n        this.username = data.sub;\n        this.authorizations = data.authorizations;\n    }\n\n}\n\n\n"],"sourceRoot":""}]}