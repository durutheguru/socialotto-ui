{"remainingRequest":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js!/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js??ref--13-2!/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts","dependencies":[{"path":"/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts","mtime":1590615951907},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/dduru/VSCode/OmarzeUI/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9kZHVydS9WU0NvZGUvT21hcnplVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvZGR1cnUvVlNDb2RlL09tYXJ6ZVVJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBNb2NrQWRhcHRlciBmcm9tICdheGlvcy1tb2NrLWFkYXB0ZXInOwppbXBvcnQgTG9nIGZyb20gJ0AvY29tcG9uZW50cy91dGlsL0xvZyc7Cgp2YXIgSW50ZXJjZXB0b3JSZWdpc3RyeSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEludGVyY2VwdG9yUmVnaXN0cnkoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW50ZXJjZXB0b3JSZWdpc3RyeSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSW50ZXJjZXB0b3JSZWdpc3RyeSwgbnVsbCwgW3sKICAgIGtleTogInJlZ2lzdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcihpbnRlcmNlcHRvcikgewogICAgICB2YXIgaW50ZXJjZXB0b3JzRW5hYmxlZCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfRU5BQkxFX0lOVEVSQ0VQVE9SUyA9PT0gJ3RydWUnOwoKICAgICAgaWYgKCFpbnRlcmNlcHRvcnNFbmFibGVkKSB7CiAgICAgICAgTG9nLmluZm8oJ0ludGVyY2VwdG9ycyBkaXNhYmxlZC4gSWdub3JpbmcgSW50ZXJjZXB0b3IgcmVnaXN0cmF0aW9uLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBpbnRlcmNlcHRvci5pbnRlcmNlcHRDb25maWdzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgdmFyIGNvbmZpZyA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIHN3aXRjaCAoY29uZmlnLm1ldGhvZCkgewogICAgICAgICAgICBjYXNlICdHRVQnOgogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExvZy5pbmZvKCdSZWdpc3RlcmluZyBHRVQgaGFuZGxlciBmb3IgJyArIEludGVyY2VwdG9yUmVnaXN0cnkuQkFTRV9VUkwgKyBjb25maWcudXJsKTsKICAgICAgICAgICAgICAgIEludGVyY2VwdG9yUmVnaXN0cnkubW9jay5vbkdldChJbnRlcmNlcHRvclJlZ2lzdHJ5LkJBU0VfVVJMICsgY29uZmlnLnVybCkucmVwbHkoY29uZmlnLnJlc3BvbnNlLnN0YXR1cywgY29uZmlnLnJlc3BvbnNlLmJvZHksIGNvbmZpZy5yZXNwb25zZS5oZWFkZXJzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgJ1BPU1QnOgogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIExvZy5pbmZvKCdSZWdpc3RlcmluZyBQT1NUIGhhbmRsZXIgZm9yICcgKyBJbnRlcmNlcHRvclJlZ2lzdHJ5LkJBU0VfVVJMICsgY29uZmlnLnVybCk7CiAgICAgICAgICAgICAgICBJbnRlcmNlcHRvclJlZ2lzdHJ5Lm1vY2sub25Qb3N0KEludGVyY2VwdG9yUmVnaXN0cnkuQkFTRV9VUkwgKyBjb25maWcudXJsKS5yZXBseShjb25maWcucmVzcG9uc2Uuc3RhdHVzLCBjb25maWcucmVzcG9uc2UuYm9keSwgY29uZmlnLnJlc3BvbnNlLmhlYWRlcnMpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5pbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvcik7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSW50ZXJjZXB0b3JSZWdpc3RyeTsKfSgpOwoKZXhwb3J0IHsgSW50ZXJjZXB0b3JSZWdpc3RyeSBhcyBkZWZhdWx0IH07CkludGVyY2VwdG9yUmVnaXN0cnkuaW50ZXJjZXB0b3JzID0gW107CkludGVyY2VwdG9yUmVnaXN0cnkuQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0JBU0VfVVJMOwpJbnRlcmNlcHRvclJlZ2lzdHJ5Lm1vY2sgPSBuZXcgTW9ja0FkYXB0ZXIoYXhpb3MsIHsKICBvbk5vTWF0Y2g6ICdwYXNzdGhyb3VnaCcKfSk7"},{"version":3,"sources":["/Users/dduru/VSCode/OmarzeUI/src/interceptors/InterceptorRegistry.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,MAAwB,oBAAxB;AAEA,OAAO,GAAP,MAAgB,uBAAhB;;IAIqB,mB;;;;;;;;;6BASM,W,EAAyB;AAC5C,UAAM,mBAAmB,GAAI,OAAO,CAAC,GAAR,CAAY,2BAAZ,KAA4C,MAAzE;;AAEA,UAAI,CAAC,mBAAL,EAA0B;AACtB,QAAA,GAAG,CAAC,IAAJ,CAAS,2DAAT;AACA;AACH;;AAN2C;AAAA;AAAA;;AAAA;AAQ5C,6BAAqB,WAAW,CAAC,gBAAjC,8HAAmD;AAAA,cAAxC,MAAwC;;AAC/C,kBAAQ,MAAM,CAAC,MAAf;AACI,iBAAK,KAAL;AAAY;AACR,gBAAA,GAAG,CAAC,IAAJ,CAAS,iCAAiC,mBAAmB,CAAC,QAArD,GAAgE,MAAM,CAAC,GAAhF;AACA,gBAAA,mBAAmB,CAAC,IAApB,CACK,KADL,CACW,mBAAmB,CAAC,QAApB,GAA+B,MAAM,CAAC,GADjD,EAEK,KAFL,CAGQ,MAAM,CAAC,QAAP,CAAgB,MAHxB,EAIQ,MAAM,CAAC,QAAP,CAAgB,IAJxB,EAKQ,MAAM,CAAC,QAAP,CAAgB,OALxB;AAOA;AACH;;AAED,iBAAK,MAAL;AAAa;AACT,gBAAA,GAAG,CAAC,IAAJ,CAAS,kCAAkC,mBAAmB,CAAC,QAAtD,GAAiE,MAAM,CAAC,GAAjF;AACA,gBAAA,mBAAmB,CAAC,IAApB,CACK,MADL,CACY,mBAAmB,CAAC,QAApB,GAA+B,MAAM,CAAC,GADlD,EAEK,KAFL,CAGQ,MAAM,CAAC,QAAP,CAAgB,MAHxB,EAIQ,MAAM,CAAC,QAAP,CAAgB,IAJxB,EAKQ,MAAM,CAAC,QAAP,CAAgB,OALxB;AAOA;AACH;AAvBL;AAyBH;AAlC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoC5C,WAAK,YAAL,CAAkB,IAAlB,CAAuB,WAAvB;AACH;;;;;;SA9CgB,mB;AAEH,mBAAA,CAAA,YAAA,GAA+B,EAA/B;AAEA,mBAAA,CAAA,QAAA,GAAmB,OAAO,CAAC,GAAR,CAAY,gBAA/B;AAEC,mBAAA,CAAA,IAAA,GAAoB,IAAI,WAAJ,CAAgB,KAAhB,EAAuB;AAAE,EAAA,SAAS,EAAE;AAAb,CAAvB,CAApB","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport Log from '@/components/util/Log';\nimport IInterceptor from './IInterceptor';\n\n\nexport default class InterceptorRegistry {\n\n    public static interceptors: IInterceptor[] = [];\n\n    public static BASE_URL: string = process.env.VUE_APP_BASE_URL;\n\n    private static mock: MockAdapter = new MockAdapter(axios, { onNoMatch: 'passthrough' });\n\n\n    public static register(interceptor: IInterceptor) {\n        const interceptorsEnabled = (process.env.VUE_APP_ENABLE_INTERCEPTORS === 'true');\n\n        if (!interceptorsEnabled) {\n            Log.info('Interceptors disabled. Ignoring Interceptor registration.');\n            return;\n        }\n        \n        for (const config of interceptor.interceptConfigs) {\n            switch (config.method) {\n                case 'GET': {\n                    Log.info('Registering GET handler for ' + InterceptorRegistry.BASE_URL + config.url);\n                    InterceptorRegistry.mock\n                        .onGet(InterceptorRegistry.BASE_URL + config.url)\n                        .reply(\n                            config.response.status, \n                            config.response.body,\n                            config.response.headers\n                        );\n                    break;\n                }\n\n                case 'POST': {\n                    Log.info('Registering POST handler for ' + InterceptorRegistry.BASE_URL + config.url);\n                    InterceptorRegistry.mock\n                        .onPost(InterceptorRegistry.BASE_URL + config.url)\n                        .reply(\n                            config.response.status, \n                            config.response.body,\n                            config.response.headers\n                        );\n                    break;\n                }\n            }\n        }\n\n        this.interceptors.push(interceptor);\n    }\n\n\n}\n\n"],"sourceRoot":""}]}